" set guifont=Ubuntu\ Mono\ 11
set guifont=Hack\ Regular\ 9
" set guifont=Fira\ Code\ Regular\ 9
" set guifont=Sudo\ Medium\ 12


"=====================================================================
" Load plugins using plug.vim (https://github.com/junegunn/vim-plug)
"=====================================================================
call plug#begin('~/.vim/plugged')
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'chrisbra/csv.vim'
Plug 'airblade/vim-gitgutter'
Plug 'ervandew/supertab'
Plug 'jlanzarotta/bufexplorer'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'
Plug 'lifepillar/vim-solarized8'
Plug 'gruvbox-community/gruvbox'
Plug 'sainnhe/sonokai'
Plug 'rakr/vim-one'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dotenv'
Plug 'tpope/vim-projectionist'
Plug 'igemnace/vim-makery'
Plug 'rbong/vim-flog', { 'branch': 'v1' }
Plug 'wellle/targets.vim'
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'raimon49/requirements.txt.vim'
Plug 'psf/black'
Plug 'jmcantrell/vim-virtualenv'
Plug 'junegunn/vim-peekaboo'
Plug 'sheerun/vim-polyglot'
Plug 'ruanyl/vim-gh-line'
Plug 'nathangrigg/vim-beancount'
Plug 'vim-test/vim-test'
Plug 'tartansandal/vim-compiler-pytest'
Plug 'mtth/scratch.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'matze/vim-move'
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
Plug 'kenn7/vim-arsync'
Plug 'prabirshrestha/async.vim' " vim-arsync dependency.
Plug 'dense-analysis/neural'
Plug 'liuchengxu/vista.vim'
Plug 'rhysd/clever-f.vim'
Plug 'markonm/traces.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'github/copilot.vim'
if has('python3')
    Plug 'puremourning/vimspector'
    Plug 'obreitwi/vim-sort-folds'
    Plug 'davidhalter/jedi-vim'
endif
call plug#end()

"=====================================================================
" Colors and syntax highlighting.
"=====================================================================
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

let python_highlight_all = 1
syntax enable
set background=dark
colorscheme solarized8_flat

"=====================================================================
" Various settings
"=====================================================================

let mapleader = ' '

filetype on
filetype plugin indent on

" Be smart about it
set smarttab
" Set the number of space to indent
set shiftwidth=4
" Like a modern text editor and not like old vi
set backspace=indent,eol,start
" Behave thyself
behave xterm
" Setting ttymouse ensure it works properly inside tmux
set ttymouse=xterm2
" Like a modern text editor
set mouse=a
set guioptions=ai
set nomousefocus
" Set the text width
set textwidth=79
" Do backup before writing files
set writebackup
" Show the ruler at bottom of screen
set ruler
" Do no bother me with beeps or visual beeps
set visualbell t_vb=
set belloff=all
" Do not wrap lines
set nowrap
" To highlight the searched words
set hlsearch
" Show the matched pattern as it is typed
set incsearch
" Insert spaces instead of tabstop
set expandtab
"Output format of grep
"set grepformat=%f:%l:%m
set grepprg=grep
" The sign at the beginning of the line when wrapping a line
set showbreak=>>>
"Don't ignore case when there is an upper case character in the pattern. For
"smartcase to take effect, ignorecase must be on.
set ignorecase
set smartcase
" Set wrapping of cursor movement
set ww=b,s,<,>,[,]
" Print
set printoptions=paper:letter,duplex:off
" Vertical split shows no |
set fillchars=fold:-

" Diff
set diffopt=filler,vertical
"if &diff
  "set foldcolumn=2
"else
  "set foldcolumn=0
"endif

" File Explorer settings
let g:explHideFiles='^\.,\.gz$,\.exe$,\.zip$,\.o,\..*~$'

" Files with this suffixe will get a lower priority
set suffixes='.bak,~,.o,.info,.swp,.obj,.pyc'

" statusline
" cf the default statusline: %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" Always show a status line.
set laststatus=2
" Ignore certain files from listings.
set wildignore+=*.pyc,*.*~,build

" Persist undo history in $HOME/.vimundo
set undofile
set undodir=~/.vimundo

" Set vim update time to 250ms (default 4sec)
set updatetime=250

set modeline

set signcolumn=yes

" 'showmode' must be disabled for Jedi command line call signatures to be
" visible.
set noshowmode

" Allows italics to be properly shown in terminals, especially tmux.
set t_ZH=[3m
set t_ZR=[23m

" Use a line cursor within insert mode and a block cursor everywhere else.
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Set the directory for swap files to something else then the default, which is
" directory=~/.vim//,.,~/tmp,/var/tmp,/tmp 
set directory=~/.vim/swapfiles//,~/.vim//,.,~/tmp,/var/tmp,/tmp

"=====================================================================
" Plugins
"=====================================================================

" BufExplorer
let g:bufExplorerShowRelativePath=1

" SuperTab
" let g:SuperTabDefaultCompletionType = "context"

" Tagbar
let g:tagbar_autoclose = 1
let g:tagbar_compact = 1
let g:tagbar_show_visibility = 0
let g:tagbar_iconchars = ['â–º', 'â–¼']
let g:tagbar_left = 1
let g:tagbar_show_balloon = 0

" Gruvbox colorscheme settings
let g:gruvbox_vert_split = 'bg1'
let g:gruvbox_invert_selection = 0
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_sign_column = 'bg0'

" Sonokai colorscheme
let g:sonokai_style='shusia'

" Airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = 'î‚°'
let g:airline_left_alt_sep = '|'
let g:airline_right_sep = 'î‚²'
let g:airline_right_alt_sep = '|'
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = 'î‚¢'
let g:airline_symbols.dirty='âš¡'
let g:airline_symbols.spell = 'êž¨'
let g:airline_symbols.notexists = 'É†'
let g:airline_symbols.crypt = 'ðŸ”’'
" Only show the file encoding if it differs from utf-8[unix]
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#virtualenv#enabled = 1
let g:airline_section_z = airline#section#create(['%l:%c'])
let g:airline_skip_empty_sections = 1
let g:airline_mode_map = {
    \ '__'     : '-',
    \ 'c'      : 'C',
    \ 'i'      : 'I',
    \ 'ic'     : 'I',
    \ 'ix'     : 'I',
    \ 'n'      : 'N',
    \ 'multi'  : 'M',
    \ 'ni'     : 'N',
    \ 'no'     : 'N',
    \ 'R'      : 'R',
    \ 'Rv'     : 'R',
    \ 's'      : 'S',
    \ 'S'      : 'S',
    \ ''     : 'S',
    \ 't'      : 'T',
    \ 'v'      : 'V',
    \ 'V'      : 'V',
    \ ''     : 'V',
    \ }
let g:airline#extensions#branch#displayed_head_limit = 35
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#formatter = 'unique_tail'

"Set AsyncRun status in airline
let g:asyncrun_status = ""
let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

" Jedi
let g:jedi#completions_enabled = 0
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 2

" fzf colorscheme matching
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" ALE Python fixers
let g:ale_lsp_suggestions = 1
let g:ale_fixers = {
\   'python': ['black', 'ruff'],
\    'sql': ['remove_trailing_lines', 'trim_whitespace'],
\    'jinja-sql': ['remove_trailing_lines', 'trim_whitespace'],
\    'markdown': ['remove_trailing_lines'],
\    'beancount': ['remove_trailing_lines', 'trim_whitespace'],
\ }
" ALE Python linters
let g:ale_linters = {'python': ['ruff']}
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
let g:ale_sign_error = 'â– '
let g:ale_sign_warning = 'â– '
let g:ale_sign_column_always=1
let g:ale_completion_enabled = 1

" Virtualenv.vim auto activation
let g:virtualenv_auto_activate = 1

" vim-gh-line doesn't open URL, but copy to clipboard
let g:gh_open_command = 'fn() { echo "$@" | xclip -selection c -r; }; fn '
" Disable default key mappings
let g:gh_line_map_default = 0
let g:gh_line_blame_map_default = 1
let g:gh_line_map = '<leader>kh'
let g:gh_line_blame_map = '<leader>kb'

" Startify options
let g:startify_session_persistence = 1
let g:startify_session_savevars = [
    \ 'g:startify_session_savevars',
    \ 'g:startify_session_savecmds',
    \ 'g:jedi#environment_path'
\ ]
let g:startify_change_to_vcs_root = 1
let g:startify_lists = [
    \ { 'type': 'sessions',  'header': ['   Sessions']       },
    \ { 'type': 'files',     'header': ['   MRU']            },
    \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'commands',  'header': ['   Commands']       },
\ ]

" Undotree options
let g:undotree_SetFocusWhenToggle = 1

" Scratch re-mapping of defaults because they interfere with fugitive
let g:scratch_no_mappings = 1
let g:scratch_height = 20

" Python vim-test settings
let g:test#python#pytest#options = '--tb=short -q'
let g:test#python#runner = 'pytest'
let test#strategy = "asyncrun_background"

" Doge configuration
let g:doge_enable_mappings = 0
let g:doge_mapping = '<Leader>u'
let g:doge_doc_standard_python = 'google'

" Configure Neural
let g:neural = {
\   'source': {
\       'openai': {
\           'api_key': $OPENAI_API_KEY,
\       },
\   },
\   'selected': 'chatgpt',
\}

" clever-f settings
let g:clever_f_smart_case = 1

" vim-lsp settings
let g:lsp_diagnostics_enabled = 0
let g:lsp_semantic_enabled = 1

" Vista settings
let g:vista_default_executive = 'vim_lsp'
let g:vista_fzf_preview = ['right:50%']

"=====================================================================
" Environment variables
"=====================================================================

let $BAT_THEME='Solarized (dark)'
let $FZF_PREVIEW_COMMAND="COLORTERM=truecolor bat --style=numbers,changes --force-colorization {}"


"=====================================================================
" Functions
"=====================================================================

fun AsyncrunStatus()
    if g:asyncrun_code == 1
        let g:asyncrun_status = "failed"
    else
        let g:asyncrun_status = ""
    endif
endfun

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
    " Whenever the theme is set to solarized, use base16_solarized instead.
    if g:airline_theme == 'solarized'
        let g:airline_theme='base16_solarized'
    endif
endfunction
"=====================================================================
" Autocommands
"=====================================================================

" Set syntax sync fromstart for all Python files
autocmd BufEnter *.py :syntax sync fromstart

" This is to be used with file .vim/syntax/jinja-sql.vim
" It should in theory highlight both jinja and sql syntax found in the same
" file.
autocmd BufEnter *.sql set filetype=jinja-sql

" Spell-check Markdown files and Git Commit Messages
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell

" Restore folds in fugitive commit windows. See this issue about
" future development:
" https://github.com/tpope/vim-fugitive/issues/1735#issuecomment-822037483
autocmd User FugitiveCommit set foldmethod=syntax

" Beancount filetype setting for Supertab
autocmd FileType beancount let g:beauncount_separator_col=56
autocmd FileType beancount let b:SuperTabContextDefaultCompletionType="<c-x><c-o>"
autocmd FileType beancount VirtualEnvActivate budget

" The following setup will automatically run tests when a test file or its
" alternate application file is saved. Cf. vim-test.
augroup test
  autocmd!
  autocmd BufWrite * if test#exists() |
    \   TestFile |
    \ endif
augroup END

" AsyncRun. Automatically open the quickfix window if there are error after
" running a command with AsyncRun.
" autocmd User AsyncRunStop if g:asyncrun_code > 0 | copen | endif
autocmd User AsyncRunStop call AsyncrunStatus()
autocmd User AsyncRunStart let g:asyncrun_status = 'âŒ›'

" Remove the filetype from the X section of airline. We basically, recreate
" this section with this autocmd.
autocmd VimEnter * let g:airline_section_x = airline#section#create_right(['tagbar']) | :AirlineRefresh
" Disable tagbar integration. I want to see as much of the filename as I can
" and beside I never look at the function in the status bar.
let g:airline#extensions#tagbar#enabled = 0

function! s:sonokai_custom() abort
  " Initialize the color palette.
  " The first parameter is a valid value for `g:sonokai_style`,
  " and the second parameter is a valid value for `g:sonokai_colors_override`.
  let l:palette = sonokai#get_palette('shusia', {})
  " Define a highlight group.
  " The first parameter is the name of a highlight group,
  " the second parameter is the foreground color,
  " the third parameter is the background color,
  " the fourth parameter is for UI highlighting which is optional,
  " and the last parameter is for `guisp` which is also optional.
  " See `autoload/sonokai.vim` for the format of `l:palette`.
  call sonokai#highlight('VertSplit', l:palette.none, l:palette.bg1)
endfunction

augroup SonokaiCustom
  autocmd!
  autocmd ColorScheme sonokai call s:sonokai_custom()
augroup END

"In order to recognize dvc.lock and .dvc files as YAML
autocmd! BufNewFile,BufRead Dvcfile,*.dvc,dvc.lock setfiletype yaml

"=====================================================================
" Commands
"=====================================================================
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \ "rg --column --line-number --no-heading --color=always --smart-case -- ".shellescape(<q-args>),
  \ 1,
  \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}),
  \ <bang>0)

" Makery
" Make a :Make command using asyncrun#run. This allows to run makery command in
" the background.
" command! -bang -nargs=+ -range=0 -complete=file Make
" 		\ call asyncrun#run('<bang>', '', <q-args>, <count>, <line1>, <line2>)

"=====================================================================
" Highlights
"=====================================================================
function! ALEHighlights() abort
    " highlight ALEError gui=underline cterm=underline
    " highlight ALEWarning gui=underline cterm=underline
    " highlight ALEInfo gui=underline cterm=underline
    highlight ALEErrorSign guibg=NONE ctermbg=NONE
    highlight ALEWarningSign guibg=NONE ctermbg=NONE
    highlight ALEInfoSign guibg=NONE ctermbg=NONE
    highlight ALEErrorSignLineNr guibg=NONE ctermbg=NONE
    highlight ALEWarningSignLineNr guibg=NONE ctermbg=NONE
    highlight ALEInfoSignLineNr guibg=NONE ctermbg=NONE
endfunction

function! BeancountHighlights() abort
    if g:colors_name == 'one'
        highlight link beanAccount Function
        highlight link beanDate Statement
    elseif g:colors_name == 'gruvbox'
        highlight link beanAmount Operator
        highlight link beanDate Float
    endif
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call ALEHighlights()
    autocmd ColorScheme * call BeancountHighlights()
augroup END

call ALEHighlights()

"=====================================================================
" Mappings and Abbreviations
"=====================================================================
map <Leader>z :b #<CR>
map <Leader>q :close<CR>
map <Leader>w :tabclose<CR>
nnoremap <Leader>/ :nohlsearch<CR>

" highlight the current line
nnoremap <Leader>l :call matchadd('Search', '\%'.line('.').'l')<CR>
" clear all the highlighted lines
nnoremap <Leader>c :call clearmatches()<CR>

" fzf.vim mappings
nnoremap <Leader>o :Rg<CR>
nnoremap <leader>O :Rg <C-R><C-W><CR>
nnoremap <Leader>t :Tags<CR>

" Moving around windows
map <C-k> <C-W>k
map <C-j> <C-W>j
map <C-l> <C-W>l
map <C-h> <C-W>h
" Resize current window to 90 wide.
map <Leader>a :90 wincmd \| <CR>
map <Leader>A :180 wincmd \| <CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ALE mappings
" Go to next/previous ALE warning or error.
nmap <silent> [j <Plug>(ale_previous)
nmap <silent> ]j <Plug>(ale_next)
" Toggle on/off ALE linting
nmap <Leader>e :ALEToggle<CR>

" Scratch mappings
nmap <Leader>gp :ScratchPreview<CR>
nmap <Leader>gs <plug>(scratch-insert-reuse)
nmap <Leader>gS <plug>(scratch-insert-clear)
xmap <Leader>gs <plug>(scratch-selection-reuse)
xmap <Leader>gS <plug>(scratch-selection-clear)

" Vista mappings
nmap <Leader>f :Vista finder <CR>

" Mapping of function keys
nmap <F1> :Files<CR>
noremap <F2> :BufExplorer<CR>
" nmap <F2> :BufExplorer<CR>
nmap <F3> :Vista!! <CR>
nmap <F5> :Flog<CR>
nmap <S-F5> :Flog -path=%<CR>
nmap <F6> :Gtabedit :<CR>:set previewwindow <CR>
nmap <S-F6> :GitGutterFold<CR>
nmap <C-F6> :0Gclog<CR>
nmap <CS-F6> :Gedit <CR> \| :ccl <CR>
nmap <F8> :Git commit<CR>
nmap <S-F8> :Git push origin HEAD<CR>
nmap <CS-F8> :Git rebase -i master<CR>
nmap <F9> :UndotreeToggle<CR>
