"=====================================================================
" File: .vimrc
" Author: Hugues Demers
"=====================================================================

set guifont=Ubuntu\ Mono\ 12
" set guifont=Cousine\ Regular\ 10


"=====================================================================
" Load plugins using plug.vim (https://github.com/junegunn/vim-plug)
"=====================================================================
call plug#begin('~/.vim/plugged')
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/csv.vim'
Plug 'ervandew/supertab'
Plug 'jlanzarotta/bufexplorer'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'mbbill/undotree'
Plug 'morhetz/gruvbox'
Plug 'w0rp/ale'
Plug 'sudar/vim-arduino-syntax'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'sodapopcan/vim-twiggy'
Plug 'junegunn/gv.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'wellle/targets.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
if has('python3')
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'nathanaelkane/vim-indent-guides'
Plug 'davidhalter/jedi-vim'
Plug 'junegunn/fzf', { 'dir': '~/src/fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
call plug#end()

"=====================================================================
" Color stuff (for highlighting see ~/.vim/after/syntax/syncolor.vim
"=====================================================================

let python_highlight_all = 1

syntax enable
set background=dark
set termguicolors
silent! colorscheme solarized8

"set t_Co=256

"=====================================================================
" Various settings
"=====================================================================
filetype on
filetype plugin indent on

" Terminal xterm-color strangeness
"if &term == "xterm-color"
  "set t_kb=
  "fixdel
"endif

"set mousemodel=popup

" Be smart about it
set smarttab
" Set the number of space to indent
set shiftwidth=4
" Like a modern text editor and not like old vi
set backspace=indent,eol,start
" Behave thyself
behave xterm
" Like a modern text editor
set mouse=a
set guioptions=agimt
set nomousefocus
" Set the text width
set textwidth=79
" Do backup before writing files
set writebackup
" Show the ruler at bottom of screen
set ruler
" Do no bother me with beeps or visual beeps
set visualbell t_vb=
set belloff=all
" Do not wrap lines
set nowrap
" To highlight the searched words
set hlsearch
" Show the matched pattern as it is typed
set incsearch
" Insert spaces instead of tabstop
set expandtab
"Output format of grep
"set grepformat=%f:%l:%m
set grepprg=grep
" The sign at the beginning of the line when wrapping a line
set showbreak=>>>
"Don't ignore case when there is an upper case character in the pattern. For
"smartcase to take effect, ignorecase must be on.
set ignorecase
set smartcase
" Set wrapping of cursor movement
set ww=b,s,<,>,[,]
" Print
set printoptions=paper:letter,duplex:off
" Vertical split shows no |
set fillchars=fold:-

" Diff
set diffopt=filler,vertical
"if &diff
  "set foldcolumn=2
"else
  "set foldcolumn=0
"endif

" File Explorer settings
let g:explHideFiles='^\.,\.gz$,\.exe$,\.zip$,\.o,\..*~$'

" Files with this suffixe will get a lower priority
set suffixes='.bak,~,.o,.info,.swp,.obj,.pyc'

" statusline
" cf the default statusline: %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
" Always show a status line.
set laststatus=2
" Ignore certain files from listings.
set wildignore+=*.pyc,*.*~,build

" Persist undo history in $HOME/.vimundo
set undofile
set undodir=~/.vimundo

" Set vim update time to 250ms (default 4sec)
set updatetime=250

set modeline

set signcolumn=yes

"=====================================================================
" Plugins
"=====================================================================

" BufExplorer
let g:bufExplorerShowRelativePath=1

" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" Tagbar
let g:tagbar_autoclose = 0
let g:tagbar_compact = 1
let g:tagbar_show_visibility = 0
let g:tagbar_iconchars = ['▸', '▾']
let g:tagbar_left = 1

" gitgutter off by default
let g:gitgutter_enabled = 1

" gruvbox colorscheme settings
let g:gruvbox_vert_split = 'bg1'
let g:gruvbox_invert_selection = 0
let g:gruvbox_contrast_dark = 'soft'

" Deoplete
let g:deoplete#enable_at_startup = 1

" Airline
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
" Only show the file encoding if it differs from utf-9[unix]
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#virtualenv#enabled = 1

" Indent guides
let g:indent_guides_guide_size = 1

" Jedi is used only for jumping to definition, not for completion.
let g:jedi#completions_enabled = 0

" fzf colorscheme matching
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"=====================================================================
" Autocommands
"=====================================================================

" Save session upon dying unexpectedly
autocmd VimLeave  *  if v:dying | :mksession! | endif
" Commands for CloseTag plugin
"autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
"autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
"=====================================================================
" Mappings and Abbreviations
"=====================================================================

map <Leader>z :b #<CR>
map <Leader>q :bd<CR>
map <C-s> :write<CR>
nnoremap <Leader>/ :nohlsearch<CR>
nmap <Leader>i :GitGutterToggle<CR>
nnoremap <C-T> :TagbarOpen<CR>

" fzf.vim mappings
nnoremap <Leader>o :GGrep<CR>
nnoremap <Leader>t :Tags<CR>

" Moving around windows
map <C-k> <C-W>k
map <C-j> <C-W>j
map <C-l> <C-W>l
map <C-h> <C-W>h

" Searching using Git
map <Leader>p :Ggrep <cword><CR><CR> :cl<CR>

" Mapping of function keys
nmap <S-F2> :Explore<CR>
nmap <F2> :BufExplorer<CR>
" nmap <F2> :BufExplorer<CR>
nmap <F3> :TagbarToggle<CR>
nmap <F5> :GV<CR>
nmap <S-F5> :Twiggy<CR>
nmap <F6> :Gstatus<CR>
nmap <F7> :Gdiffsplit!<CR>
nmap <F8> :Gcommit<CR>
nmap <S-F8> :w <CR> :Gwrite<CR>
nmap <F9> :UndotreeToggle<CR>
